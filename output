#version 310 es

precision highp float;
precision highp int;

layout(location = 0) out uvec4 _group_0_binding_1_cs;

uniform uint _group_0_binding_0_cs_texture_width;
uniform uint _group_0_binding_0_cs_texture_height;
uniform highp usampler2D _group_0_binding_0_cs;
uniform uint _group_0_binding_1_cs_texture_width;
uniform uint _group_0_binding_1_cs_texture_height;
uniform uint _group_0_binding_2_cs;

uniform uint thread_viewport_width;
uniform uint thread_viewport_height;

in vec2 thread_uv;


uniform uint gws_x;
uniform uint gws_y;
uniform uint gws_z;
        

vec2 select_from_idx(uint textureWidth, uint textureHeight, uint idx) {
  float col = float(idx % textureWidth) + 0.5;
  float row = float(idx / textureWidth) + 0.5;
  return vec2 (
    col / float(textureWidth),
    row / float(textureHeight)
  );
}

ivec2 select_from_idx_int(uint textureWidth, uint idx) {
  uint col = idx % textureWidth;
  uint row = idx / textureWidth;
  return ivec2 (int(col), int(row));
}
        

vec2 int_mod(vec2 x, float y) {
  vec2 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec3 int_mod(vec3 x, float y) {
  vec3 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

vec4 int_mod(vec4 x, vec4 y) {
  vec4 res = floor(mod(x, y));
  return res * step(1.0 - floor(y), -res);
}

highp float int_mod(highp float x, highp float y) {
  highp float res = floor(mod(x, y));
  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);
}

highp int int_mod(highp int x, highp int y) {
  return int(int_mod(float(x), float(y)));
}

const vec2 MAGIC_VEC        = vec2(1.0, -256.0);
const vec4 SCALE_FACTOR     = vec4(1.0, 256.0, 65536.0, 0.0);
const vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536);

highp uint udecode(uvec4 rgba) {
    rgba.a = rgba.a << 24u;  
    rgba.b = rgba.b << 16u;  
    rgba.g = rgba.g << 8u;
    return rgba.a + rgba.b + rgba.g + rgba.r;
}

uvec4 uencode(highp uint rgba) {
    uint a = (rgba & (0xFF000000u)) >> 24u;
    uint b = (rgba & (0x00FF0000u)) >> 16u;
    uint g = (rgba & (0x0000FF00u)) >> 8u;
    uint r = rgba & 255u;
    return uvec4(r, g, b, a);
}

highp float decode(highp vec4 rgba) {

  rgba *= 255.0;
  vec2 gte128;
  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;
  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;
  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);
  float res = exp2(round(exponent));
  rgba.b = rgba.b - 128.0 * gte128.x;
  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;
  res *= gte128.y * -2.0 + 1.0;
  return res;
}

highp vec4 encode(highp float f) {
  highp float F = abs(f);
  highp float sign = f < 0.0 ? 1.0 : 0.0;
  highp float exponent = floor(log2(F));
  highp float mantissa = (exp2(-exponent) * F);
  // exponent += floor(log2(mantissa));
  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;
  rgba.rg = int_mod(rgba.rg, 256.0);
  rgba.b = int_mod(rgba.b, 128.0);
  rgba.a = exponent*0.5 + 63.5;
  rgba.ba += vec2(int_mod(exponent+127.0, 2.0), sign) * 128.0;
  rgba = floor(rgba);
  rgba *= 0.003921569; // 1/255

  return rgba;
}
        

uint find(uint org_n) {
    uint n = 0u;
    uint label = 0u;
    n = org_n;
    uint _e3 = n;
    uint _e5 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, _e3 ), 0));
    label = _e5;
    while(true) {
        uint _e7 = label;
        uint _e10 = n;
        if (((_e7 - 1u) != _e10)) {
        } else {
            break;
        }
        {
            uint _e12 = label;
            n = (_e12 - 1u);
            uint _e16 = n;
            uint _e18 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, _e16 ), 0));
            label = _e18;
        }
    }
    uint _e19 = n;
    return _e19;
}

void unionOf(uint org_a, uint org_b) {
    uint a = 0u;
    uint b = 0u;
    bool done = false;
    a = org_a;
    b = org_b;
    while(true) {
        bool _e6 = done;
        if (!(_e6)) {
        } else {
            break;
        }
        {
            uint _e8 = a;
            uint _e9 = find(_e8);
            a = _e9;
            uint _e10 = b;
            uint _e11 = find(_e10);
            b = _e11;
            uint _e12 = a;
            uint _e13 = b;
            if ((_e12 < _e13)) {
                uint _e16 = b;
                uint old = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, _e16 ), 0));
                uint _e19 = a;
                if (((_e19 + 1u) < old)) {
                    uint _e24 = b;
                    uint _e26 = a;
                    _group_0_binding_1_cs.r = (_e26 + 1u);
                }
                uint _e29 = b;
                done = (old == (_e29 + 1u));
                b = (old - 1u);
            } else {
                uint _e35 = a;
                uint _e36 = b;
                if ((_e35 > _e36)) {
                    uint _e39 = a;
                    uint old_1 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, _e39 ), 0));
                    uint _e42 = b;
                    if (((_e42 + 1u) < old_1)) {
                        uint _e47 = a;
                        uint _e49 = b;
                        _group_0_binding_1_cs.r = (_e49 + 1u);
                    }
                    uint _e52 = a;
                    done = (old_1 == (_e52 + 1u));
                    a = (old_1 - 1u);
                } else {
                    done = true;
                }
            }
            done = true;
        }
    }
    return;
}

void main() {

    uint absolute_col = uint(thread_uv.x * float(thread_viewport_width));
    uint absolute_row = uint(thread_uv.y * float(thread_viewport_height));
    uint idx = absolute_row * thread_viewport_width + absolute_col;

    uint x_idx = idx % gws_x;
    uint y_idx = (idx / gws_x) % gws_y;
    uint z_idx = (idx / (gws_x * gws_y)) % gws_z;

    uvec3 global_id = uvec3(x_idx, y_idx, z_idx);
        
    uint x = 0u;
    uint y = 0u;
    uint outIdx = 0u;
    uint currentLabel = 0u;
    x = global_id.x;
    y = global_id.y;
    uint _e7 = _group_0_binding_2_cs;
    outIdx = ((global_id.y * _e7) + global_id.x);
    uint _e12 = outIdx;
    if ((_e12 >= uint(_group_0_binding_1_cs_texture_width * _group_0_binding_1_cs_texture_height))) {
        _group_0_binding_1_cs = uencode( _group_0_binding_1_cs.r );
        return;
    }
    uint _e17 = outIdx;
    uint _e19 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, _e17 ), 0));
    currentLabel = _e19;
    uint _e21 = currentLabel;
    if ((_e21 == 0u)) {
        _group_0_binding_1_cs = uencode( _group_0_binding_1_cs.r );
        return;
    }
    uint _e24 = y;
    if ((_e24 > 0u)) {
        uint _e27 = x;
        uint _e31 = outIdx;
        uint _e33 = _group_0_binding_2_cs;
        uint _e38 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, ((_e31 - _e33) - 1u) ), 0));
        if (((_e27 > 0u) && (_e38 > 0u))) {
            uint _e42 = outIdx;
            uint _e43 = outIdx;
            uint _e45 = _group_0_binding_2_cs;
            unionOf(_e42, ((_e43 - _e45) - 1u));
        }
        uint _e50 = outIdx;
        uint _e52 = _group_0_binding_2_cs;
        uint _e55 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, (_e50 - _e52) ), 0));
        if ((_e55 > 0u)) {
            uint _e58 = outIdx;
            uint _e59 = outIdx;
            uint _e61 = _group_0_binding_2_cs;
            unionOf(_e58, (_e59 - _e61));
        }
        uint _e64 = outIdx;
        uint _e66 = _group_0_binding_2_cs;
        uint _e71 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, ((_e64 - _e66) + 1u) ), 0));
        if ((_e71 > 0u)) {
            uint _e74 = outIdx;
            uint _e75 = outIdx;
            uint _e77 = _group_0_binding_2_cs;
            unionOf(_e74, ((_e75 + _e77) + 1u));
        }
    }
    uint _e81 = x;
    uint _e85 = outIdx;
    uint _e89 = udecode( texelFetch( _group_0_binding_0_cs, select_from_idx_int( _group_0_binding_0_cs_texture_width, (_e85 - 1u) ), 0));
    if (((_e81 > 0u) && (_e89 > 0u))) {
        uint _e93 = outIdx;
        uint _e94 = outIdx;
        unionOf(_e93, (_e94 - 1u));
        _group_0_binding_1_cs = uencode( _group_0_binding_1_cs.r );
        return;
    } else {
        _group_0_binding_1_cs = uencode( _group_0_binding_1_cs.r );
        return;
    }
}

